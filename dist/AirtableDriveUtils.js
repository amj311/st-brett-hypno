/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var AirtableDriveUtils;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/howler/dist/howler.js":
/*!********************************************!*\
  !*** ./node_modules/howler/dist/howler.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                  } else {\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function() {\n            self._state = 'loaded';\n            \n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n\n              // If playing, restart playback to ensure looping updates.\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return 0;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (true) {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof __webpack_require__.g !== 'undefined') {\n    __webpack_require__.g.HowlerGlobal = HowlerGlobal;\n    __webpack_require__.g.Howler = Howler;\n    __webpack_require__.g.Howl = Howl;\n    __webpack_require__.g.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n\n\n//# sourceURL=webpack://AirtableDriveUtils/./node_modules/howler/dist/howler.js?");

/***/ }),

/***/ "./src/AirtableSync.vue.js":
/*!*********************************!*\
  !*** ./src/AirtableSync.vue.js ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const AirtableService = __webpack_require__(/*! ./services/AirtableService */ \"./src/services/AirtableService.js\");\nconst { Howl } = __webpack_require__(/*! howler */ \"./node_modules/howler/dist/howler.js\");\n\nconst DateRegex = /^(?<year>\\d{4})-(?<month>\\d{2})(-(?<day>\\d{2}))?$/;\n\nconst classNames = (vCtx) => {\n\treturn (className) => `${vCtx.$vnode.tag}_${className}`;\n}\n\nconst loadStylesheet = (vCtx, css) => {\n\tconst id = vCtx.$vnode.tag + '_styles';\n\tconst el = document.getElementById(id);\n\tif (!el) {\n\t\tdocument.head.insertAdjacentHTML('beforeend', `<style id=\"${id}\">${css}</style>`);\n\t}\n}\n\nconst Change = Vue.component('change', {\n\tprops: [\"old\", \"now\"],\n\t\n\ttemplate: /*html*/`\n    <span>\n\t\t<span v-if=\"!didChange\">{{old || now}}</span>\n\t\t<span v-else>\n\t\t\t<span :class=\"cx('old')\">{{old}}</span>\n\t\t\t<span :class=\"cx('now')\">{{now}}</span>\n\t\t</span>\n    </span>`,\n\n\tbeforeMount() {\n\t\tloadStylesheet(this, /* css */`\n\t\t\t.${this.cx('old')} {\n\t\t\t\tbackground: #ffd1d1;\n\t\t\t\ttext-decoration: line-through;\n\t\t\t}\n\t\t\t.${this.cx('now')} {\n\t\t\t\tbackground: #cbffd1;\n\t\t\t}\n\t\t`);\n\t},\n\n\tdata: function () {\n\t\treturn {\n\t\t\tcx: classNames(this),\n\t\t}\n\t},\n\n\tmethods: {\n\t},\n\n\tcomputed: {\n\t\tdidChange() {\n\t\t\treturn ((this.old && this.now) && this.old !== this.now);\n\t\t},\n\t}\n});\n\nconst SyncPairTable = Vue.component('syncPairTable', {\n\tcomponents: { Change },\n\tprops: [\"syncPairs\", \"finishedSync\", \"hideAirtable\", \"syncing\"],\n\t\n\ttemplate: /*html*/`\n    <div class=\"table-wrapper\">\n\t\t<table><tbody>\n\t\t\t<tr>\n\t\t\t\t<th>\n\t\t\t\t\t<span v-if=\"finishedSync\">Status</span>\n\t\t\t\t\t<input v-else type=\"checkbox\" :checked=\"allChecked\" @change=\"onChangeAll\" :disabled=\"syncing\">\n\t\t\t\t</th>\n\t\t\t\t<th class=\"name\">Track Name</th>\n\t\t\t\t<th>Release Date</th>\n\t\t\t\t<th v-if=\"!hideAirtable\">Airtable</th>\n\t\t\t\t<th>Google Drive</th>\n\t\t\t</tr>\n\t\t\t<tr v-for=\"syncPair in syncPairs\">\n\t\t\t\t<td>\n\t\t\t\t\t<span v-if=\"finishedSync\">\n\t\t\t\t\t\t<span v-if=\"syncPair.doSync && syncPair.syncResRecord\" title=\"Success\">✅</span>\n\t\t\t\t\t\t<span v-else-if=\"syncPair.doSync\" title=\"Failed\">❌</span>\n\t\t\t\t\t\t<span v-else title=\"Skipped\">⏸</span>\n\t\t\t\t\t</span>\n\t\t\t\t\t<span v-else>\n\t\t\t\t\t\t<input type=\"checkbox\" v-model=\"syncPair.doSync\" :disabled=\"syncing\">\n\t\t\t\t\t</span>\n\t\t\t\t</td>\n\t\t\t\t<td><Change :old=\"syncPair.record?.fields.file_name\" :now=\"syncPair.driveFile?.name\" /></td>\n\t\t\t\t<td><Change :old=\"syncPair.record?.fields.release_date\" :now=\"syncPair.driveFile?.dateFolder\" /></td>\n\t\t\t\t<td v-if=\"!hideAirtable\"><a :href=\"getAirtableUrl(syncPair.record.id)\" target=\"_blank\">{{syncPair.record.id}}</a></td>\n\t\t\t\t<td><a :href=\"getGoogleUrl(googleId(syncPair))\" target=\"_blank\">{{googleId(syncPair)}}</a></td>\n\t\t\t</tr>\n\t\t</tbody></table>\n\t</div>\n\t`,\n\n\tmethods: {\n\t\tgoogleId(syncPair) {\n\t\t\treturn syncPair.driveFile?.id || syncPair.record?.fields.drive_id;\n\t\t},\n\t\tgetAirtableUrl(recordId) {\n\t\t\treturn \"https://airtable.com/app412fK8ppzF15Y2/tblreK8W3yna7ZTXc/viw9QvMcAVI81Lt1A/\" + recordId;\n\t\t},\n\t\tgetGoogleUrl(fileId) {\n\t\t\treturn `https://drive.google.com/file/d/${fileId}/view`;\n\t\t},\n\n\t\tonChangeAll(event) {\n\t\t\tconst checked = event.target.checked;\n\t\t\tfor (const pair of this.syncPairs) {\n\t\t\t\tpair.doSync = checked;\n\t\t\t}\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tallChecked() {\n\t\t\tfor (const pair of this.syncPairs) {\n\t\t\t\tif (!pair.doSync) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n});\n\nVue.component('airtablesync', {\n\tcomponents: { Change, SyncPairTable },\n\n\ttemplate: /*html*/`\n\n    <div id=\"AirtableSyncVueWrapper\">\n        <div v-html=\"stylesheet\"></div>\n        <div class=\"header\">\n\t\t\t<div class=\"left-logos\">\n\t\t\t\t<img id=\"gdriveLogo\" src=\"https://pngimg.com/uploads/google_drive/google_drive_PNG14.png\" />\n\t\t\t\t<img id=\"arrow\" src=\"https://clipground.com/images/arrow-1.png\" />\n\t\t\t\t<img id=\"airtableLogo\" src=\"https://seeklogo.com/images/A/airtable-logo-216B9AF035-seeklogo.com.png\" />\n\t\t\t\t<h1>&nbsp;&nbsp;Hypnotherapy Sync Tool</h1>\n\t\t\t</div>\n\t\t\t<div class=\"right-nav\">\n\t\t\t\t<a\n\t\t\t\t\thref=\"https://drive.google.com/drive/folders/1tWhqAdJ5MfsaqIJYuRbGHRYX3liSD838\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t>\n\t\t\t\t\tGoogle Drive\n\t\t\t\t</a>\n\t\t\t\t<a\n\t\t\t\t\thref=\"https://airtable.com/app412fK8ppzF15Y2/tblreK8W3yna7ZTXc/viwMphBsGKphzXSZl?blocks=hide\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t>\n\t\t\t\t\tAirtable\n\t\t\t\t</a>\n\t\t\t\t<a\n\t\t\t\t\thref=\"https://docs.google.com/document/d/14w4dYqbAW3HOaXfIDypxyYjH8kqGUgvwlDVSzLWMEbI/edit#heading=h.ewp86hikz4j3\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t>\n\t\t\t\t\tInstructions\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t</div>\n        <div class=\"main\">\n\t\t\t<div v-if=\"loading\">Loading ...</div>\n\t\t\t<div v-else>\n\t\t\t\t<div class=\"messageWrapper\">\n\t\t\t\t\t<div v-for=\"msg in messages\" :class=\"['message', msg.type]\">\n\t\t\t\t\t\t<span v-if=\"msg.type === 'error'\">❌&nbsp;</span>\n\t\t\t\t\t\t<span v-if=\"msg.type === 'success'\">✅&nbsp;</span>\n\t\t\t\t\t\t{{msg.message}}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<section>\n\t\t\t\t\t<h3>Step One: Scan Drive Files</h3>\n\t\t\t\t\t<div v-if=\"!syncReady\">\n\t\t\t\t\t\t<a v-on:click=\"prepareSync\" class=\"button sync\">Scan</a>\n\t\t\t\t\t\t<span v-if=\"preparingSync\">&nbsp;&nbsp;Scanning...</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-else>\n\t\t\t\t\t\t<a v-on:click=\"prepareSync\" class=\"button sync-again\">Re-scan</a>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t\t\n\t\t\t\t<section>\n\t\t\t\t\t<h3>Step Two: Review Changes</h3>\n\t\t\t\t\t<div v-if=\"!syncReady\">\n\t\t\t\t\t\tSync is not ready for review.\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-else>\n\t\t\t\t\t\t<details :open=\"Boolean(newFiles.length)\">\n\t\t\t\t\t\t\t<summary><b>🟢 New Tracks ({{filterWillSync(newFiles).length}}/{{newFiles.length}})</b></summary>\n\t\t\t\t\t\t\t<p>These Google Drive files are not connected to any Track in Airtable and will be added.</p>\n\t\t\t\t\t\t\t<SyncPairTable\n\t\t\t\t\t\t\t\tv-if=\"newFiles.length\"\n\t\t\t\t\t\t\t\t:syncing=\"syncing\"\n\t\t\t\t\t\t\t\t:syncPairs=\"newFiles\"\n\t\t\t\t\t\t\t\t:hideAirtable=\"true\"\n\t\t\t\t\t\t\t\t:finishedSync=\"finishedSync\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</details>\n\t\t\t\t\t\t<details :open=\"Boolean(recordsToUpdate.length)\">\n\t\t\t\t\t\t\t<summary><b>✏️ Will Update ({{filterWillSync(recordsToUpdate).length}}/{{recordsToUpdate.length}})</b></summary>\n\t\t\t\t\t\t\t<p>These tracks already exist in Airtable but have been changed in a way that will update Airtable data. Changes are marked in green.</p>\n\t\t\t\t\t\t\t<SyncPairTable\n\t\t\t\t\t\t\t\tv-if=\"recordsToUpdate.length\"\n\t\t\t\t\t\t\t\t:syncing=\"syncing\"\n\t\t\t\t\t\t\t\t:syncPairs=\"recordsToUpdate\"\n\t\t\t\t\t\t\t\t:finishedSync=\"finishedSync\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</details>\n\t\t\t\t\t\t<details :open=\"Boolean(recordsToRestore.length)\">\n\t\t\t\t\t\t\t<summary><b>♻️ Will Restore ({{filterWillSync(recordsToRestore).length}}/{{recordsToRestore.length}})</b></summary>\n\t\t\t\t\t\t\t<p>These have previously been marked as deleted, but have since been brought back into a synced Drive folder.</p>\n\t\t\t\t\t\t\t<SyncPairTable\n\t\t\t\t\t\t\t\tv-if=\"recordsToRestore.length\"\n\t\t\t\t\t\t\t\t:syncing=\"syncing\"\n\t\t\t\t\t\t\t\t:syncPairs=\"recordsToRestore\"\n\t\t\t\t\t\t\t\t:finishedSync=\"finishedSync\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</details>\n\t\t\t\t\t\t<details :open=\"Boolean(recordsToDelete.length)\">\n\t\t\t\t\t\t\t<summary><b>🚫 Will Delete ({{filterWillSync(recordsToDelete).length}}/{{recordsToDelete.length}})</b></summary>\n\t\t\t\t\t\t\t<p>These are tracks in Airtable which can no longer be found in Google Drive. They have either been deleted or moved out of a synced folder.</p>\n\t\t\t\t\t\t\t<p>If a sync deletes these from Airtable, they can be restored when their Drive file is moved back into a synced folder. </p>\n\t\t\t\t\t\t\t<SyncPairTable\n\t\t\t\t\t\t\t\tv-if=\"recordsToDelete.length\"\n\t\t\t\t\t\t\t\t:syncing=\"syncing\"\n\t\t\t\t\t\t\t\t:syncPairs=\"recordsToDelete\"\n\t\t\t\t\t\t\t\t:finishedSync=\"finishedSync\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</details>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\n\t\t\t\t<section>\n\t\t\t\t\t<h3>Step Three: Save to Airtable</h3>\n\t\t\t\t\t<a\n\t\t\t\t\t\tv-on:click=\"doSync\"\n\t\t\t\t\t\tclass=\"button save\"\n\t\t\t\t\t\t:disabled=\"!syncReady || syncing || finishedSync\"\n\t\t\t\t\t>\n\t\t\t\t\t\tSave\n\t\t\t\t\t</a>\n\t\t\t\t\t<span v-if=\"syncing || finishedSync\" class=\"status\">{{syncStatus}}</span>\n\t\t\t\t\t<br/><br/>\n\t\t\t\t\t<a v-if=\"finishedSync\" @click=\"dismissResults\">Dismiss Results</a>\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t</div>\n    </div>`,\n\n\tdata: function () {\n\t\treturn {\n\t\t\tloading: true,\n\t\t\tpreparingSync: false,\n\t\t\tfinishedSync: false,\n\t\t\tsyncing: false,\n\t\t\tsyncStatus: \"\",\n\t\t\tsyncReady: false,\n\t\t\tsyncError: null,\n\t\t\tmessages: [],\n\n\t\t\tnewFiles: [],\n\t\t\trecordsToUpdate: [],\n\t\t\trecordsToDelete: [],\n\t\t\trecordsToRestore: [],\n\n\t\t\tstylesheet: /*html*/`\n            <style>\n                body {\n                    font-family: sans-serif;\n\t\t\t\t\tmargin: 0;\n                }\n\n\t\t\t\ta {\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t\tcolor: blue;\n\t\t\t\t}\n\n\t\t\t\t.header {\n                    display: flex;\n                    align-items: center;\n\t\t\t\t\tborder-bottom: 1px solid #ccc;\n\t\t\t\t\tpadding: 1em;\n\t\t\t\t\tjustify-content: space-between;\n\t\t\t\t\tflex-wrap: wrap;\n\t\t\t\t\tgap: 1em;\n                }\n\t\t\t\t.left-logos {\n                    display: flex;\n                    align-items: center;\n                }\n                .left-logos img {\n                    width: 2em;\n                }\n                img#arrow {\n                    width: 1em;\n                    margin: 0 .25em;\n                }\n\t\t\t\t.left-logos h1 {\n\t\t\t\t\tmargin: 0;\n  \t\t\t\t\ttext-align: right;\n\t\t\t\t}\n\t\t\t\t.right-nav {\n\t\t\t\t\twhite-space: nowrap;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tgap: .75em;\n\t\t\t\t\tflex-wrap: wrap;\n\t\t\t\t}\n\t\t\t\t.right-nav a {\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\tline-height: 2em;\n\t\t\t\t\ttext-decoration: none;\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t\tcolor: #222;\n\t\t\t\t}\n\t\t\t\t.right-nav a:hover {\n\t\t\t\t\ttext-decoration: underline;\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\t.main {\n\t\t\t\t\tmargin: 0 auto;\n                    max-width: 80rem;\n\t\t\t\t\tpadding: 1em;\n\t\t\t\t}\n                .button {\n                    display: inline-block;\n                    background: #0bf;\n                    color: #fff;\n                    padding: .25em .5em;\n                    border-radius: .25em;\n                    user-select: none;\n                    cursor: pointer;\n                }\n\t\t\t\tdetails summary {\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t\tmargin-top: 0.5em;\n\t\t\t\t}\n\t\t\t\t.table-wrapper {\n\t\t\t\t\toverflow-x: auto;\n\t\t\t\t\tborder: 1px solid #ccc;\n\t\t\t\t\tborder-radius: .5em;\n\t\t\t\t\tmargin-bottom: 1em;\n\t\t\t\t}\n\t\t\t\ttable {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tborder-collapse: collapse;\n\t\t\t\t}\n\t\t\t\ttr:first-child {\n\t\t\t\t\tborder-bottom: 1px solid #ccc;\n\t\t\t\t}\n\t\t\t\ttr:not(:first-child):hover {\n\t\t\t\t\tbox-shadow: 0 0 0.5em 0px #0004;\n\t\t\t\t}\n\t\t\t\tth {\n\t\t\t\t\twhite-space: nowrap;\n\t\t\t\t\tposition: relative;\n\t\t\t\t}\n\t\t\t\tth:not(:last-child)::after {\n\t\t\t\t\tcontent: '';\n\t\t\t\t\tdisplay: block;\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\ttop: .75em;\n\t\t\t\t\tbottom: .75em;\n\t\t\t\t\tright: 0;\n\t\t\t\t    border-right: 1px solid #ccc;\n\t\t\t\t}\n\t\t\t\tth.name {\n\t\t\t\t\tmin-width: 18em;\n\t\t\t\t}\n\t\t\t\ttd, th {\n\t\t\t\t\tpadding: .75em;\n\t\t\t\t\ttext-align: left;\n\t\t\t\t}\n                \n\t\t\t\t.button.save {\n\t\t\t\t\tbackground: #29d202;\n\t\t\t\t}\n\t\t\t\t.button.save[disabled] {\n\t\t\t\t\tbackground: #bbb;\n\t\t\t\t\tpointer-events: none;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t.messageWrapper {\n\t\t\t\t\tposition: fixed;\n\t\t\t\t\tz-index: 10;\n\t\t\t\t\ttop: 0;\n\t\t\t\t\tleft: 1em;\n\t\t\t\t\tright: 1em;\n\t\t\t\t\theight: 0;\n\t\t\t\t}\n\t\t\t\t.message {\n\t\t\t\t\twidth: fit-content;\n\t\t\t\t\tmargin: 1em auto;\n\t\t\t\t\tmax-width: 30em;\n\t\t\t\t\tdisplay: block;\n                    background: #fff;\n                    border: 1px solid #ccc;\n\t\t\t\t\tborder-radius: 5px;\n\t\t\t\t\tbox-shadow: 0 2px 5px 2px #0002;\n                    padding: 0.5em 0.75em;\n\t\t\t\t}\n\t\t\t\t.message.error {\n                    background: #ffe8e8;\n                    border: 1px solid #ffaaaa;\n\t\t\t\t}\n\t\t\t\t.message.success {\n                    background: #e8ffe8;\n                    border: 1px solid #aaeeaa;\n\t\t\t\t}\n            </style>\n            `\n\t\t}\n\t},\n\n\tprops: [\"config\"],\n\n\tmounted() {\n\t\tthis.loading = true;\n\n\t\tvar script = document.createElement('script');\n\t\tscript.src = 'https://apis.google.com/js/api.js';\n\n\t\tscript.onload = async () => {\n\t\t\tconst object = {\n\t\t\t\t\"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCj5mLIWpJd/Gex\\nJT9va5YzLSfWTHzDvHM3jrQCo+KkY9K7ceJtuRxL9zytKQ7xiD883uJB25kmTPge\\nfK9FT6Rz7FQN7260oRUEWllVa4qwiq45njx8WI1ApIxaoP0ayybIjUDQhMU4trVX\\nea08SBmdlpZPvMrDGDKJSN/tZHd12FV4ySl1qY58dxXmpKXlSzGRtSYgU99+hGLa\\nPIN8nA26B/4IcQ+sLg60ZKt3vSE2CHtwc5x+6KpOKxP1kk0I+Ed3PN64Qu9W1hOh\\ntzOT/KEE9uEXPDlxcFG16L/6fKcuuyDpo6J/EXDBHGWFw8Tuq3vRowu1EAtP2w0K\\najR/d/bpAgMBAAECggEAEl7f/ZhL8DrlSHFmAyVqSBbXRel8JoL4ixFJ/e3D7oG9\\n0gK5dWuaegKei24fCFV+zmImYWlYE3dBwZu0wtkNaWzjcvho+S1WP2RSalpLyO6S\\nXqTsyfyG6z2bpGDdCGQdgbx2DP6EuI70vnbwmDbLSuLhECjstSIA2sBkplAXel7K\\nMNSASWvyCmXo4Z2FkeA4OUbkxwVrD+++/FGF3BjAur67/R4XkjwZSJQ10+AJ3/Un\\n/YG4vdMal/T+hNK0QHvZmdPxWL/hxg4y1LBsMNnrVtFZVNgXsPv7Jz1VjC2Bdo+Q\\nZgclVIlSZrWTk2kmuR55WlgXErj6Pp7cXfFovyaKnQKBgQDQV+iA9pZvvz3q5+lg\\nxa9lcv+tXS7xhZmNvlJSdJZnioC+Y7pYCzrYWi/mrw4rlm2YA2Qs1KKYY4vVglh/\\ni8von9rC8NYjjvY0WehfnpNWsFSk0pjxvTZJTRX7pydprw9P2UHuIGmyEJeCYFxC\\nRDvevvYT+wTQ/r0dvY5Y3PBgSwKBgQDJY/m5JV+CASv/EK1VwauviXCvxVszUvRT\\nfHq4zH/UUmuz6ObVWzzDfBwsXkE2YDMGLwZdzXpjo4So4NKhjC2/+xj/a+NW0CiE\\nI4gHECk3iDkq6t8WjPA58pH8vgIoV5eX2o21T2ciX1drs80hNuNe0yC2/iDZDTOH\\n59u6t24NGwKBgQCjMejOc9kcyTlv8p6tDcw49B5wJsipqRPBoq4LJoXVrvjvqWCC\\nrLE4XVSeJss7u0Y3R5jFQP3nzjnvUX2O0uszWVvbTRj/m3EhSrephqY0xkRXIxto\\nZ+TJABfTGnjV4Klmy3BIXZ1NPI/hMSezRI19CinpNrvsFU3/qMaCtvWXBwKBgDDc\\n1fFLFRI48JDRXg0JkXtksHelPcyFGwzKjggabgV4/fLH1oH7whF4ImnNcKsdyiN8\\n82F9Am38dap36gMSPONwrA8FAULF/J6a9F0qWaXEooI8PGZ/SaX1qeAVxfY90mUg\\nvPM50b8wPMi/9kxRwfb26OAdZqDjKBaYdeKmsMfzAoGBAIw0wjMgQSbYKUOrIUI+\\nISXQAhmvkcWPm8dYA3MfwgNKil3leW4B/5LUYyUYJ0GBjHMKHo7QeDX0j5Tq8Fua\\npE6jk1gly34wIpm7y+DqKrgWBpk1i/tQj9UdpE64+lSLO7XZ5I2/lbbkbFwD0XZc\\n0fJExhVvK9qCxXAh1lqaIc7U\\n-----END PRIVATE KEY-----\\n\",\n\t\t\t\t\"client_email\": \"apexeffectserviceaccount@apexeffecttools.iam.gserviceaccount.com\",\n\t\t\t\tscopes: [\"https://www.googleapis.com/auth/drive.readonly\"],\n\t\t\t};\n\n\t\t\tawait gapi.load(\"client\", async () => {\n\t\t\t\tlet token = await GetAccessTokenFromServiceAccount.do(object);\n\t\t\t\tgapi.auth.setToken(token)\n\t\t\t});\n\n\t\t\tthis.loading = false;\n\t\t};\n\n\t\tdocument.head.appendChild(script);\n\t},\n\n\tmethods: {\n\t\tasync prepareSync() {\n\t\t\tif (this.preparingSync) return;\n\t\t\tthis.preparingSync = true;\n\t\t\tthis.finishedSync = false;\n\t\t\tthis.syncError = null;\n\t\t\tthis.syncReady = false;\n\n\t\t\tthis.newFiles = [];\n\t\t\tthis.recordsToUpdate = [];\n\t\t\tthis.recordsToDelete = [];\n\t\t\tthis.recordsToRestore = [];\n\n\t\t\ttry {\n\t\t\t\t// Load data\n\t\t\t\tthis.syncStatus = 'Scanning...';\n\n\t\t\t\tconst lastSync = await AirtableService.getLastSync();\n\t\t\t\tlet driveFiles = new Map((await this.loadDriveFiles()).map(f => [f.id, f]));\n\t\t\t\tlet tableRecords = new Map((await AirtableService.getAllTracks()).map(f => [f.fields.drive_id, f]));\n\n\t\t\t\t// Scan for changes\n\t\t\t\tfor (let driveFile of driveFiles.values()) {\n\t\t\t\t\tlet record = tableRecords.get(driveFile.id);\n\n\t\t\t\t\tconst syncPair = {\n\t\t\t\t\t\tdriveFile,\n\t\t\t\t\t\trecord,\n\t\t\t\t\t\tdoSync: true,\n\t\t\t\t\t};\n\n\t\t\t\t\t// New Files\n\t\t\t\t\tif (!record) {\n\t\t\t\t\t\tthis.newFiles.push(syncPair);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\trecord._notDeleted = true;\n\t\t\t\t\t\tdriveFile.recordId = record.id;\n\n\t\t\t\t\t\t// Restored Files\n\t\t\t\t\t\tif (record.fields.deleted_from_drive) {\n\t\t\t\t\t\t\trecord.fields.deleted_from_drive = false;\n\t\t\t\t\t\t\tthis.recordsToRestore.push(syncPair);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Updated Files\n\t\t\t\t\t\telse if (\n\t\t\t\t\t\t\t// Compare changeable values\n\t\t\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\t\t\tname: driveFile.name,\n\t\t\t\t\t\t\t\tdate: driveFile.dateFolder\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t!==\n\t\t\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\t\t\tname: record.fields.file_name,\n\t\t\t\t\t\t\t\tdate: record.fields.release_date,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.recordsToUpdate.push(syncPair);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\tfor (let record of tableRecords.values()) {\n\t\t\t\t\t// Deleted Files\n\t\t\t\t\tif (!record.fields.deleted_from_drive && !record._notDeleted) {\n\t\t\t\t\t\tthis.recordsToDelete.push({record, doSync: true});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcatch (error) {\n\t\t\t\tthis.showMessage('error', \"Error while loading files.\");\n\t\t\t\tthis.showMessage('error', error.toString());\n\t\t\t\tthis.syncError = error;\n\t\t\t\tconsole.log(this.syncError);\n\t\t\t}\n\n\t\t\tthis.preparingSync = false;\n\t\t\tthis.syncStatus = this.syncError ? \"Failed\" : \"Ready\";\n\t\t\tthis.syncReady = true;\n\t\t},\n\n\t\tasync doSync() {\n\t\t\tif (!this.syncReady) return;\n\t\t\t\n\t\t\tconst syncNew = this.filterWillSync(this.newFiles);\n\t\t\tconst syncUpdate = this.filterWillSync(this.recordsToUpdate);\n\t\t\tconst syncRestore = this.filterWillSync(this.recordsToRestore);\n\t\t\tconst syncDelete = this.filterWillSync(this.recordsToDelete);\n\n\t\t\tif (\n\t\t\t\tsyncNew.length === 0 &&\n\t\t\t\tsyncUpdate.length === 0 &&\n\t\t\t\tsyncRestore.length === 0 &&\n\t\t\t\tsyncDelete.length === 0\n\t\t\t) {\n\t\t\t\tthis.showMessage('info', \"Nothing to sync.\");\n\t\t\t\tthis.syncing = false\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!confirm(\n\t\t\t\t\"Save these tracks to Airtable?\\n\\n\" +\n\t\t\t\t`${syncNew.length} - New\\n` +\n\t\t\t\t`${syncUpdate.length} - Update\\n` +\n\t\t\t\t`${syncRestore.length} - Restore\\n` +\n\t\t\t\t`${syncDelete.length} - Delete`\n\t\t\t)) return;\n\n\t\t\ttry {\n\t\t\t\tthis.syncing = true;\n\n\t\t\t\t// load track metadata\n\t\t\t\tthis.syncStatus = 'Loading track metadata...';\n\n\t\t\t\tconst tracksToLoad = [\n\t\t\t\t\t...syncNew,\n\t\t\t\t\t...syncUpdate,\n\t\t\t\t\t...syncRestore\n\t\t\t\t];\n\n\t\t\t\tawait Promise.all(tracksToLoad.map(async (pair) => {\n\t\t\t\t\tconst trackData = await this.loadTrackData(pair.driveFile.id);\n\t\t\t\t\t// All of these pairs should be bringing in data from an existing drive file\n\t\t\t\t\tpair.driveFile.duration = trackData.duration;\n\t\t\t\t}));\n\n\t\t\t\t// Save changes to Airtable\n\t\t\t\tthis.syncStatus = 'Saving to Airtable...';\n\n\t\t\t\tlet [newRes, updateRes, restoreRes, deleteRes] = await Promise.all([\n\t\t\t\t\tAirtableService.saveNewFiles(\n\t\t\t\t\t\tsyncNew.map(pair => pair.driveFile)\n\t\t\t\t\t),\n\t\t\t\t\tAirtableService.saveUpdatedFiles(\n\t\t\t\t\t\tsyncUpdate.map(pair => pair.driveFile)\n\t\t\t\t\t),\n\t\t\t\t\tAirtableService.saveRestoredFiles(\n\t\t\t\t\t\tsyncRestore.map(pair => pair.driveFile)\n\t\t\t\t\t),\n\t\t\t\t\tAirtableService.saveDeletedFiles(\n\t\t\t\t\t\tsyncDelete.map(pair => pair.record)\n\t\t\t\t\t),\n\t\t\t\t]);\n\n\t\t\t\t// Gather sync report\n\t\t\t\tfor (let record of newRes) {\n\t\t\t\t\tlet pair = this.newFiles.find(p => p.driveFile.id === record.fields.drive_id);\n\t\t\t\t\tif (pair) {\n\t\t\t\t\t\tpair.syncResRecord = record;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let record of updateRes) {\n\t\t\t\t\tlet pair = this.recordsToUpdate.find(p => p.driveFile.id === record.fields.drive_id);\n\t\t\t\t\tif (pair) {\n\t\t\t\t\t\tpair.syncResRecord = record;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let record of restoreRes) {\n\t\t\t\t\tlet pair = this.recordsToRestore.find(p => p.driveFile.id === record.fields.drive_id);\n\t\t\t\t\tif (pair) {\n\t\t\t\t\t\tpair.syncResRecord = record;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let record of deleteRes) {\n\t\t\t\t\tlet pair = this.recordsToDelete.find(p => p.record.fields.drive_id === record.fields.drive_id);\n\t\t\t\t\tif (pair) {\n\t\t\t\t\t\tpair.syncResRecord = record;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait AirtableService.saveSyncReport(\n\t\t\t\t\tthis.newFiles.filter(p => p.syncResRecord).map(f => f.syncResRecord.id),\n\t\t\t\t\tthis.recordsToUpdate.filter(p => p.syncResRecord).map(p => p.syncResRecord.id),\n\t\t\t\t\tthis.recordsToRestore.filter(p => p.syncResRecord).map(p => p.syncResRecord.id),\n\t\t\t\t\tthis.recordsToDelete.filter(p => p.syncResRecord).map(p => p.syncResRecord.id),\n\t\t\t\t\tthis.syncError\n\t\t\t\t);\n\n\t\t\t\tthis.showMessage('success', \"Finished sync!\");\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tthis.showMessage('error', \"Error while saving sync record.\");\n\t\t\t\tthis.showMessage('error', error.toString());\n\t\t\t\tthis.syncError = error;\n\t\t\t\tthis.syncError.failed = {\n\t\t\t\t\tnew: this.newFiles.filter(p => !p.syncResRecord),\n\t\t\t\t\tupdate: this.recordsToUpdate.filter(p => !p.syncResRecord),\n\t\t\t\t\trestore: this.recordsToRestore.filter(p => !p.syncResRecord),\n\t\t\t\t\tdelete: this.recordsToDelete.filter(p => !p.syncResRecord),\n\t\t\t\t}\n\t\t\t\tconsole.log(this.syncError);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tthis.syncing = false;\n\t\t\t\tthis.syncStatus = this.syncError ? \"Error\" : \"Complete!\";\n\t\t\t\tthis.finishedSync = true;\n\t\t\t}\n\t\t},\n\n\t\tasync loadDriveFiles() {\n\t\t\tawait gapi.client.init({\n\t\t\t\tdiscoveryDocs: [\n\t\t\t\t\t\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\",\n\t\t\t\t],\n\t\t\t});\n\n\t\t\tconst FinishedTracksFolderId = '1p9ZyFEhSeSkAv_gOCOgMh8McyNcYS-Hf';\n\n\t\t\tlet dateRes = await gapi.client.drive.files.list({\n\t\t\t\tsupportsAllDrives: true,\n\t\t\t\tincludeItemsFromAllDrives: true,\n\t\t\t\tfields: \"files(name, id, mimeType, parents)\",\n\t\t\t\tq: `\n\t\t\t\t\t\t'${FinishedTracksFolderId}' in parents\n\t\t\t\t\t\tand mimeType = 'application/vnd.google-apps.folder'\n\t\t\t\t\t`\n\t\t\t});\n\n\t\t\t// Filter out folders that don't match the date format\n\t\t\tconst dateFolders = JSON.parse(dateRes.body).files.filter((f) => f.name.match(DateRegex));\n\n\t\t\tconst files = [];\n\n\t\t\tfor (let dateFolder of dateFolders) {\n\t\t\t\tconst { year, month, day } = DateRegex.exec(dateFolder.name).groups;\n\t\t\t\tconst dateString = `${year}-${month}-${day || '01'}`;\n\n\t\t\t\tlet fileRes = await gapi.client.drive.files.list({\n\t\t\t\t\tsupportsAllDrives: true,\n\t\t\t\t\tincludeItemsFromAllDrives: true,\n\t\t\t\t\tfields: \"files(name, id, mimeType, parents, modifiedTime)\",\n\t\t\t\t\tq: `\n\t\t\t\t\t\t'${dateFolder.id}' in parents\n\t\t\t\t\t\tand mimeType = 'audio/mpeg'\n\t\t\t\t\t`\n\t\t\t\t});\n\t\t\t\tconst dateFiles = JSON.parse(fileRes.body).files;\n\t\t\t\tdateFiles.forEach(f => files.push({\n\t\t\t\t\t...f,\n\t\t\t\t\tdateFolder: dateString,\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\treturn files;\n\t\t},\n\n\t\tasync loadTrackData(driveId) {\n\t\t\treturn new Promise((res, rej) => {\n\t\t\t\tconst howl = new Howl({\n\t\t\t\t\tsrc: [ 'https://docs.google.com/uc?export=download&id='+driveId ],\n\t\t\t\t\thtml5: true,\n\t\t\t\t\tpreload: true\n\t\t\t\t});\n\t\t\t\thowl.on('loaderror', rej);\n\t\t\t\thowl.on('load', () => {\n\t\t\t\t\thowl.stop();\n\t\t\t\t\tres({\n\t\t\t\t\t\tduration: howl.duration(),\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\thowl.volume(0);\n\t\t\t\thowl.play();\n\t\t\t});\n\t\t},\n\n\t\tgetAirtableUrl(recordId) {\n\t\t\treturn \"https://airtable.com/app412fK8ppzF15Y2/tblreK8W3yna7ZTXc/viw9QvMcAVI81Lt1A/\" + recordId;\n\t\t},\n\n\t\tgetGoogleUrl(fileId) {\n\t\t\treturn `https://drive.google.com/file/d/${fileId}/view`;\n\t\t},\n\n\t\tfilterWillSync(syncPairs) {\n\t\t\treturn syncPairs.filter(p => p.doSync);\n\t\t},\n\n\t\tdismissResults() {\n\t\t\t// remove tracks that already succeeded so they aren't duplicated\n\t\t\tfor (const list of ['newFiles', 'recordsToUpdate', 'recordsToRestore', 'recordsToDelete']) {\n\t\t\t\tthis[list] = this[list].filter(pair => !pair.syncResRecord);\n\t\t\t}\n\t\t\tthis.finishedSync = false;\n\t\t\tthis.syncError = false;\n\t\t},\n\n\t\tshowMessage(type, message) {\n\t\t\tconst id = `${Math.ceil(Math.random()*100)}${Date.now()}`;\n\t\t\tthis.messages.push({id, type, message});\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.messages = this.messages.filter(m => m.id !== id);\n\t\t\t}, 10000);\n\t\t}\n\t}\n});\n\nmodule.exports = function insertAirtableSync(elId, config) {\n\tlet anchorEl = document.getElementById(elId);\n\tif (!anchorEl) return;\n\n\tlet html = /*html*/`\n        <div id=\"RecentBlogInsert\"><AirtableSync :config=\"config\"></AirtableSync></div>\n    `\n\tanchorEl.outerHTML = html;\n\tnew Vue({ el: \"#RecentBlogInsert\", data: { config } });\n}\n\n// This is a Javascript library to retrieve the access token from the Google Service Account.\n// https://github.com/tanaikech/GetAccessTokenFromServiceAccount_js\ndocument.write(\n\t'<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jsencrypt/3.0.0-rc.1/jsencrypt.min.js\"></script>'\n);\ndocument.write(\n\t'<script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js\"></script>'\n);\n\n\nconst GetAccessTokenFromServiceAccount = (function () {\n\tconst _url = \"https://www.googleapis.com/oauth2/v4/token\";\n\tconst _grant_type = \"urn:ietf:params:oauth:grant-type:jwt-bearer\";\n\n\tfunction _main(_obj) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst { private_key, client_email, scopes } = _obj;\n\t\t\tif (!private_key || !client_email || !scopes) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"No required values. Please set 'private_key', 'client_email' and 'scopes'\"\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst header = { alg: \"RS256\", typ: \"JWT\" };\n\t\t\tconst now = Math.floor(Date.now() / 1000);\n\t\t\tconst claim = {\n\t\t\t\tiss: client_email,\n\t\t\t\tscope: scopes.join(\" \"),\n\t\t\t\taud: _url,\n\t\t\t\texp: (now + 3600).toString(),\n\t\t\t\tiat: now.toString(),\n\t\t\t};\n\t\t\tif (_obj.userEmail) {\n\t\t\t\tclaim.sub = _obj.userEmail;\n\t\t\t}\n\t\t\tconst signature =\n\t\t\t\tbtoa(JSON.stringify(header)) + \".\" + btoa(JSON.stringify(claim));\n\t\t\tconst sign = new JSEncrypt();\n\t\t\tsign.setPrivateKey(private_key);\n\t\t\tconst jwt =\n\t\t\t\tsignature + \".\" + sign.sign(signature, CryptoJS.SHA256, \"sha256\");\n\t\t\tconst params = {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tassertion: jwt,\n\t\t\t\t\tgrant_type: _grant_type,\n\t\t\t\t}),\n\t\t\t};\n\t\t\tfetch(_url, params)\n\t\t\t\t.then((res) => res.json())\n\t\t\t\t.then((res) => resolve(res))\n\t\t\t\t.catch((err) => reject(err));\n\t\t});\n\t}\n\n\treturn { do: _main };\n})();\n\n//# sourceURL=webpack://AirtableDriveUtils/./src/AirtableSync.vue.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("__webpack_require__(/*! ./media-player/AirtablePlayer.vue */ \"./src/media-player/AirtablePlayer.vue.js\")\n\nmodule.exports = {\n    insertAirtableSync: __webpack_require__(/*! ./AirtableSync.vue */ \"./src/AirtableSync.vue.js\"),\n    insertAirtablePlayer: __webpack_require__(/*! ./media-player/AirtablePlayer.vue */ \"./src/media-player/AirtablePlayer.vue.js\"),\n}\n\n//# sourceURL=webpack://AirtableDriveUtils/./src/index.js?");

/***/ }),

/***/ "./src/media-player/AirtablePlayer.vue.js":
/*!************************************************!*\
  !*** ./src/media-player/AirtablePlayer.vue.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const TrackPlayer = __webpack_require__(/*! ./TrackPlayer.vue */ \"./src/media-player/TrackPlayer.vue.js\");\nconst TrackBrowser = __webpack_require__(/*! ./TrackBrowser.vue */ \"./src/media-player/TrackBrowser.vue.js\");\n\nVue.component('airtableplayer',{\n    components: {TrackPlayer, TrackBrowser},\n    template: /*html*/`\n\n    <div id=\"AirtablePlayerVueWrapper\">\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\n        <div v-html=\"stylesheet\"></div>\n       \n        <div class=\"content-wrapper\">\n            <div class=\"welcome\">\n                <h1>{{greeting}}</h1>\n            </div>\n\n            <div class=\"content\">\n                <TrackBrowser v-show=\"mode === 'browse'\" @playTrack=\"playTrack\"  />\n                <TrackPlayer v-show=\"mode === 'play'\" :track=\"activeTrack\" :autostart=\"true\" @close=\"closePlayer\" />\n            </div>\n        </div>\n    </div>`,\n\n    props: [\"config\"],\n    \n    data: function() {\n        return {\n            mode: 'browse',\n            activeTrack: null,\n            \n            stylesheet: /*html*/`\n            <style>\n                #AirtablePlayerVueWrapper {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    height: 100%;\n                    width: 100%;\n                    box-sizing: border-box;\n                    background: #fff;\n                    font-family: sans-serif;\n                    overflow-y: auto;\n                    padding: 1em;\n\n                    background: linear-gradient(138deg, #7bd5f5, #787ff6, #4adede, #1ca7ec, #1f2f98, #7bd5f5);\n                    background-size: 1200% 1200%;\n\n                    -webkit-animation: AnimationName 120s linear infinite;\n                    -moz-animation: AnimationName 120s linear infinite;\n                    animation: AnimationName 120s linear infinite;\n                }\n\n                @-webkit-keyframes AnimationName {\n                    0%{background-position:0% 4%}\n                    50%{background-position:100% 97%}\n                    100%{background-position:0% 4%}\n                }\n                @-moz-keyframes AnimationName {\n                    0%{background-position:0% 4%}\n                    50%{background-position:100% 97%}\n                    100%{background-position:0% 4%}\n                }\n                @keyframes AnimationName {\n                    0%{background-position:0% 4%}\n                    50%{background-position:100% 97%}\n                    100%{background-position:0% 4%}\n                }\n\n                .content-wrapper {\n                    margin: 0 auto;\n                    max-width: 50em;\n                }\n\n                .welcome {\n                    padding: 0 1em 1em 1em;\n                    color: #fff;\n                }\n\n                .content {\n                    background: #fff;\n                    box-shadow: 0 0 1em #00000044;\n                    border-radius: 1em;\n                    padding: 1em;\n                    display: flex;\n                    min-height: 30em;\n                }\n            </style>\n            `\n        }\n    },\n\n    beforeMount() {\n        this.$root.config = this.config;\n    },\n\n\n    methods: {\n        playTrack(track) {\n            this.activeTrack = track;\n            this.mode = 'play';\n        },\n        closePlayer() {\n            this.activeTrack = null;\n            this.mode = 'browse';\n        }\n    },\n\n    computed: {\n        greeting() {\n            let time;\n            let hours = new Date().getHours();\n            if (hours < 12) time = 'Morning';\n            else if (hours < 17) time = 'Afternoon';\n            else if (hours < 24) time = 'Evening';\n\n            return \"Good \" + time + (this.config.name ? \", \"+this.config.name : \"\");\n        }\n    }\n});\n\nmodule.exports = function insertAirtablePlayer(elId, config = {}) {\n    let anchorEl = document.getElementById(elId);\n    if (!anchorEl) return;\n\n    for (let {name, value} of anchorEl.attributes) {\n        if (name.startsWith(\":\")) {\n            config[name.substring(1, name.length)] = value;\n        }\n    }\n\n    let html = /*html*/`\n        <div id=\"AirtablePlayerInsert\"><AirtablePlayer :config=\"config\"></AirtablePlayer></div>\n    `\n    anchorEl.outerHTML = html;\n    new Vue({el:\"#AirtablePlayerInsert\", data:{config}});\n}\n\n\n//# sourceURL=webpack://AirtableDriveUtils/./src/media-player/AirtablePlayer.vue.js?");

/***/ }),

/***/ "./src/media-player/TrackBrowser.vue.js":
/*!**********************************************!*\
  !*** ./src/media-player/TrackBrowser.vue.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const AirtableService = __webpack_require__(/*! ../services/AirtableService */ \"./src/services/AirtableService.js\");\nconst TrackList = __webpack_require__(/*! ./TrackList.vue */ \"./src/media-player/TrackList.vue.js\");\n\nconst TrackBrowser = Vue.component('trackbrowser',{\n    components: {TrackList},\n    template: /*html*/`\n\n    <div id=\"browser-wrapper\">\n        <div v-html=\"stylesheet\"></div>\n\n        <div v-if=\"loading\" class=\"loading-screen\">\n            <br />\n            <br />\n            <i class=\"fa fa-spinner fa-spin fa-2x\"></i>\n            <br />\n            <br />\n            <span>Loading...</span>\n        </div>\n        <div v-else-if=\"activeList\" id=\"active-list-wrapper\">\n            <div @click=\"activeList = null;\" class=\"list-closer\"><i class=\"fa fa-arrow-left\"></i> Go back</div>\n            <br/>\n            <TrackList :title=\"activeList.title\" :tracks=\"activeList.tracks\" @playTrack=\"playTrack\"  />\n        </div>\n        <div v-else>\n            <h3>Latest Releases</h3>\n            <TrackList :tracks=\"latestTracks\" @playTrack=\"playTrack\"  />\n\n            <h3>Categories</h3>\n            <div id=\"categories-wrapper\">\n                <div v-for=\"category in categoriesList\" class=\"cat-item-container\">\n                    <div class=\"cat-item\" @click=\"openList(category.tracks, category.name)\">\n                        <div class=\"thumb\"><i :class=\"[category.icon_class]\"></i></div>\n                        <div class=\"title\">{{category.name}}</div>\n                    </div>\n                </div>\n            </div>\n        \n            <h3>Previous Releases</h3>\n            <div id=\"releases-wrapper\">\n                <div v-for=\"release in releases\" class=\"release-item\" @click=\"openList(release.tracks, release.date)\">\n                    {{release.date}}\n                </div>\n            </div>\n\n        </div>        \n    </div>`,\n\n    props: [],\n    \n    data: function() {\n        return {\n            loading: false,\n            tracks: new Map(),\n            categories: new Map(),\n\n            activeList: null,\n            \n            stylesheet: /*html*/`\n            <style>\n                #browser-wrapper {\n                    display: flex;\n                    flex-direction: column;\n                    width: 100%;\n                }\n                .loading-screen {\n                    text-align: center;\n                    height: 10em;\n                }\n                #categories-wrapper {\n                    display: flex;\n                    flex-direction: row;\n                    flex-wrap: wrap;\n                    justify-content: left;\n                }\n                .cat-item-container {\n                    display: grid;\n                    width: 100px;\n                    margin: 0 1em 1em 0;\n                }\n                .cat-item {\n                    place-self: top center;\n                    user-select: none;\n                    cursor: pointer;\n                }\n                .cat-item .thumb {\n                    width: 100px;\n                    height: 100px;\n                    background: linear-gradient(325deg, #1ca7ec 30%, #4adede);\n                    border-radius: .5em;\n                    margin-bottom: .3em;\n                    display: flex;\n                    place-content: center;\n                    place-items: center;\n                }\n                .cat-item .thumb i.fa {\n                    font-size: 2em;\n                    color: #fff;\n                }\n\n                .release-item {\n                    background: linear-gradient(325deg, #787ff6 0%, #1ca7ec);\n                    color: #fff;\n                    padding: 1em;\n                    border-radius: 0.5em;\n                    display: inline-block;\n                    margin: 0 1em 1em 0;\n                    cursor: pointer;\n                    user-select: none;\n                }\n\n                #active-list-wrapper {\n                    width: 100%;\n                }\n                .list-closer {\n                    cursor: pointer;\n                    user-select: none;\n                }\n\n               \n            </style>\n            `\n        }\n    },\n\n    async beforeMount() {\n        this.loading = true;\n\n        let categories = new Map((await AirtableService.getAllCategories()).map(c => [c.id, {\n            ...c.fields,\n            id: c.id,\n            icon_class: 'fa fa-'+c.fields.icon_name,\n        }]));\n\n        let tracks = new Map((await AirtableService.getReleasedTracks()).map(t => [t.id, {\n            ...t.fields,\n            id: t.id,\n            name: t.fields.display_name || t.fields.file_name.replace(/(.mp3)?(.mp4)?(.wav)?/gi, ''),\n            categories: t.fields.categories ? t.fields.categories.map(cid => {\n                let {id, name} = categories.get(cid);\n                return {id, name};\n            }) : []\n        }]));\n\n        for (let category of categories.values()) {\n            category.tracks = category.tracks?.map(id => {\n                return tracks.get(id)\n            }).filter(track => Boolean(track)); // filter tracks not shown from category\n        };\n\n        this.categories = categories;\n        this.tracks = tracks;\n\n        this.loading = false;\n    },\n\n    methods: {\n        playTrack(track) {\n            this.$emit('playTrack', track)    \n        },\n\n        openList(tracks, title) {\n            this.activeList = {tracks, title};\n        }\n\n    },\n\n    computed: {\n        categoriesList() {\n            return Array.from(this.categories.values());\n        },\n\n        tracksList() {\n            return Array.from(this.tracks.values()).sort((a,b)=>a.release_date < b.release_date ? -1 : 1);\n        },\n\n        latestTracks() {\n            if (this.tracksList.length < 0) {\n                return [];\n            }\n            let tracks = [];\n\n            // This logic gleans the most recent portion of the tracksList from this month.\n            // Requires a sorted list to work reliably.\n            let i = this.tracksList.length-1;\n            let latestDate = this.tracksList[i].release_date;\n            while(i >= 0 && this.tracksList[i].release_date === latestDate) {\n                tracks.push(this.tracksList[i]);\n                i--;\n            }\n        \n            return tracks;\n        },\n        \n        releases() {\n            if (this.tracksList.length === 0) {\n                return [];\n            }\n\n            let releases = new Map();\n\n            for (let track of this.tracksList) {\n                if (releases.has(track.release_date)) {\n                    releases.get(track.release_date).push(track);\n                }\n                else releases.set(track.release_date, [track]);\n            }\n            return Array.from(releases.entries()).map(([date, tracks])=>({date,tracks}));\n        }\n    }\n});\n\nmodule.exports = TrackBrowser;\n\n//# sourceURL=webpack://AirtableDriveUtils/./src/media-player/TrackBrowser.vue.js?");

/***/ }),

/***/ "./src/media-player/TrackList.vue.js":
/*!*******************************************!*\
  !*** ./src/media-player/TrackList.vue.js ***!
  \*******************************************/
/***/ ((module) => {

eval("const TrackList = Vue.component('tracklist',{\n    template: /*html*/`\n\n    <div id=\"list-wrapper\">\n        <div v-html=\"stylesheet\"></div>\n\n        <div class=\"list-title\">{{title}}</div>\n\n        <div class=\"row header\">\n            <span class=\"col\"></span>\n            <span class=\"col\">Title</span>\n            <span class=\"col\">Category</span>\n            <span class=\"col\">Release Date</span>\n            <span class=\"col\">Duration</span>\n        </div>\n\n        <div v-for=\"track in tracks\" class=\"row\">\n            <div class=\"col\" id=\"play-button\" @click=\"playTrack(track)\"><i class=\"fa fa-play\"></i></div>\n            <div class=\"col track-title\" :title=\"track.name\">{{track.name}}</div>\n            <div class=\"col sub track-category\" :title=\"track.category_name\">\n                <span v-for=\"(category, i) in track.categories\">\n                    {{category.name}}{{i < track.categories.length-1 ? \", \" : \"\"}}\n                </span>\n            </div>\n            <div class=\"col sub track-release\" title=\"d\">{{fmtDate(track.release_date)}}</div>\n            <div class=\"col sub track-duration\" title=\"d\">{{fmtMSS(track.duration)}}</div>\n        </div>\n        \n    </div>`,\n\n    props: [\"tracks\", \"title\"],\n    \n    data: function() {\n        return {\n            loading: false,\n            \n            stylesheet: /*html*/`\n            <style>\n                #list-wrapper {\n                    width: 100%;\n                }\n                .list-title {\n                    font-size: 1.3em;\n                }\n                \n                .row {\n                    display: grid;\n                    align-items: center;\n                    grid-template-columns: 1.5em 3fr 1fr 6em 1fr;\n                    gap: 1em;\n                    padding: .5em 0;\n                    border-bottom: 1px solid #888;\n                }\n\n                .header .col {\n                    text-transform: uppercase;\n                    font-size: .8em;\n                    color: #000000dd;\n                }\n                \n                /*.col {\n                    overflow: hidden;\n                    text-overflow: ellipsis;\n                    white-space: nowrap;\n                }*/\n\n                .col.sub {\n                    font-size: .9em;\n                    color: #000000dd;\n                }\n\n                .row #play-button {\n                    height: 1em;\n                    width: 1em;\n                    font-size: 1.8em;\n                    border-radius: 50%;\n                    background: linear-gradient(325deg, #1ca7ec 30%, #4adede);\n                    color: #fff;\n                    text-align: center;\n                    font-weight: bold;\n                    cursor: pointer;\n                    user-select: none;\n                    position: relative;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                }\n                .row #play-button i {\n                    font-size: .5em;\n                }\n                .row:not(:hover) #play-button {\n                    filter: grayscale(1);\n                }\n                \n            </style>\n            `\n        }\n    },\n\n    methods: {\n        playTrack(track) {\n            this.$emit('playTrack', track)    \n        },\n\n        fmtDate(dateString) {\n            let date = new Date(dateString);\n            return `${date.getUTCMonth()+1}/${date.getUTCDate()}/${date.getUTCFullYear()}`\n        },\n\n\t\tfmtMSS(seconds) {\n\t\t\tif (!seconds) {\n\t\t\t\treturn \"--:--\";\n\t\t\t}\n            var minutes = Math.floor(seconds / 60);\n            var seconds = Math.floor((seconds - minutes * 60));\n        \n            return minutes + \":\" + (seconds<10 ? \"0\" : \"\") + seconds\n        }\n    },\n\n    computed: {\n    }\n});\n\nmodule.exports = TrackList;\n\n//# sourceURL=webpack://AirtableDriveUtils/./src/media-player/TrackList.vue.js?");

/***/ }),

/***/ "./src/media-player/TrackPlayer.vue.js":
/*!*********************************************!*\
  !*** ./src/media-player/TrackPlayer.vue.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {Howl} = __webpack_require__(/*! howler */ \"./node_modules/howler/dist/howler.js\");\nconst AirtableService = __webpack_require__(/*! ../services/AirtableService */ \"./src/services/AirtableService.js\");\n\nconst TrackPlayer = Vue.component('trackplayer',{\n    template: /*html*/`\n\n    <div id=\"player-wrapper\">\n        <div v-html=\"stylesheet\"></div>\n\n        <div id=\"top-section\">\n            <div class=\"bar-item button\" @click=\"close\"><i class=\"fa fa-times\"></i></div>\n        </div>\n\n        <template v-if=\"track\">\n            <div id=\"center-info\">\n                <div id=\"title\">{{track.name}}</div>\n                <div id=\"center-controls\">\n                    <div class=\"button\" id=\"scrub-back\" @click=\"()=>scrub(-10)\">\n                        <i class=\"fa fa-undo\"></i>\n                    </div>\n                    <div id=\"play-button\">\n                        <div v-if=\"isLoadingTrack\"><i class=\"fa fa-spinner fa-spin\"></i></div>\n                        <div v-else-if=\"activeHowl?.playing()\" @click=\"pause\"><i class=\"fa fa-pause\"></i></div>\n                        <div v-else @click=\"play\"><i class=\"fa fa-play\"></i></div>\n                    </div>\n                    <div class=\"button\" id=\"scrub-forward\" @click=\"()=>scrub(10)\">\n                        <i class=\"fa fa-repeat\"></i>\n                    </div>\n                </div>\n            </div>\n\n            <div id=\"progress-bar\">\n                <div id=\"bars-wrapper\">\n                    <div id=\"playback-progress\" class=\"bar\" :style=\"{width: trackProgress+'%'}\"></div>\n                </div>\n                <div id=\"progress-info\">\n                    <span>{{fmtMSS(activeHowl?.seek())}}</span>\n                    <span>{{fmtMSS(activeHowl?.duration())}}</span>\n                </div>\n            </div>\n       </template>\n    </div>`,\n\n    props: [\"track\", \"autostart\"],\n    \n    data: function() {\n        return {\n            loading: false,\n            activeHowl: null,\n            legalHowl: null,\n\t\t\tlegalMode: true,\n            trackHowl: null,\n            animation: null,\n            trackProgress: 0,\n            \n            stylesheet: /*html*/`\n            <style>\n                #player-wrapper {\n                    width: 100%;\n                    display: flex;\n                    flex-direction: column;\n                }\n                #top-section .bar-item {\n                    display: inline-block;\n                    \n                    font-size: 1.5em;\n                    color: #555;\n                    margin: 0 .125em;\n                    cursor: pointer;\n                }\n                #center-info {\n                    flex-grow: 1;\n                    align-items: center;\n                    justify-content: center;\n                    flex-direction: column;\n                    display: flex;\n                    text-align: center;\n                }\n                #title {\n                    font-size: 2em;\n                    margin: 1em;\n                }\n                #player-wrapper #play-button {\n                    line-height: 3em;\n                    width: 3em;\n                    border-radius: 50%;\n                    background: linear-gradient(325deg, #1ca7ec 30%, #4adede);\n                    color: #fff;\n                    text-align: center;\n                    font-weight: bold;\n                    cursor: pointer;\n                    user-select: none;\n                }\n                #play-button > div {\n                    width: inherit;\n                    line-height: inherit;\n                }\n                #center-controls {\n                    display: flex;\n                    align-items: center;\n                }\n\n                #center-controls .button {\n                    font-size: 1.5em;\n                    margin: 1em;\n                    opacity: .8;\n                    cursor: pointer;\n                    user-select: none;\n                }\n                #bars-wrapper {\n                    display: relative;\n                    width: 100%;\n                    height: 10px;\n                    background: #eee;\n                }\n                .bar {\n                    position: relative;\n                    top: 0;\n                    left: 0;\n                    height: 100%;\n                    background: linear-gradient(325deg, #1ca7ec 30%, #4adede);\n                }\n                #progress-info {\n                    justify-content: space-between;\n                    display: flex;\n                }\n                \n            </style>\n            `\n        }\n    },\n\n    async mounted() {\n\t\tthis.loadLegal();\n        this.handleNewTrack();\n    },\n\n    beforeDestroy() {\n        this.unloadTrack();\n    },\n\n    watch: {\n        track() { this.handleNewTrack() }\n    },\n\n    methods: {\n        loadLegal() {\n            this.legalHowl = new Howl({\n                src: [ 'https://docs.google.com/uc?export=download&id='+'1-nc2L0JdL2-SXMme_X_AXRX2D7pV1vic' ],\n                html5: true,\n                preload: true\n            });\n            this.legalHowl.load();\n            this.legalHowl.on('end', this.onEndLegal);\n\t\t\tthis.activeHowl = this.legalHowl;\n            // if (this.autostart) this.play();\n        },\n\n\t\tenterLegal() {\n\t\t\tthis.legalMode = true;\n\t\t\tthis.activeHowl = this.legalHowl;\n            if (this.autostart) this.play();\n\t\t},\n\n\t\tonEndLegal() {\n\t\t\tthis.legalMode = false;\n\t\t\tthis.activeHowl = this.trackHowl;\n\t\t\tthis.trackHowl.seek(0);\n\t\t\tthis.trackHowl.play();\n\t\t},\n\n        handleNewTrack() {\n            this.unloadTrack();\n            if (!this.track) return;\n\n\t\t\tthis.setupTrack();\n\t\t\tthis.enterLegal();\n        },\n\n\t\tsetupTrack() {\n            this.trackHowl = new Howl({\n                src: [ 'https://docs.google.com/uc?export=download&id='+this.track.drive_id ],\n                html5: true,\n                preload: true\n            });\n\t\t\tthis.trackHowl.on('load', () => {\n\t\t\t\tif (!this.track?.duration) {\n\t\t\t\t\tAirtableService.updateTrackDuration(this.track.id, this.trackHowl.duration())\n\t\t\t\t\tthis.track.duration = this.trackHowl.duration();\n\t\t\t\t}\n\t\t\t})\n            this.trackHowl.load();\n            this.trackHowl.on('end', this.stop);\n\t\t},\n        \n        unloadTrack() {\n            if (!this.trackHowl) return;\n            this.trackHowl.unload();\n            this.trackHowl = null;\n        },\n        \n\n        play() {\n            this.activeHowl.play();\n            this.doAnimation();\n        },\n\n        pause() {\n            this.activeHowl.pause();\n            this.stopAnimation();\n        },\n\n        stop() {\n            this.activeHowl.stop();\n            this.updateProgress();\n            this.stopAnimation();\n        },\n\n        scrub(delta) {\n            let time = this.activeHowl.seek() + delta;\n            time = Math.max(0, time);\n            time = Math.min(this.activeHowl.duration(), time);\n            this.activeHowl.seek(time)\n        },\n\n        updateProgress() {\n            this.trackProgress = this.activeHowl.state() === 'loaded' ? this.activeHowl.seek() / this.activeHowl.duration() * 100 : 0;\n        },\n\n        doAnimation() {\n            if (this.animation !== null) return;\n            this.animation = requestAnimationFrame(this.onAnimationFrame);\n        },\n        stopAnimation() {\n            cancelAnimationFrame(this.animation);\n            this.animation = null;\n        },\n        onAnimationFrame() {\n            if (this.activeHowl) {\n                this.updateProgress();\n            } \n            this.animation = null;\n            this.doAnimation();\n        },\n\n        close() {\n            if (confirm(\"Are you sure you want to end this meditation?\")) {\n                this.unloadTrack();\n                this.$emit('close')    \n            }\n        },\n\n        fmtMSS(seconds) {\n\t\t\tif (!seconds) {\n\t\t\t\treturn \"--:--\";\n\t\t\t}\n            var minutes = Math.floor(seconds / 60);\n            var seconds = Math.floor((seconds - minutes * 60));\n        \n            return minutes + \":\" + (seconds<10 ? \"0\" : \"\") + seconds\n        }\n        \n    },\n\n    computed: {\n        isLoadingTrack() {\n            return this.activeHowl ? this.activeHowl.state() !== 'loaded' : false;\n        }\n    }\n});\n\nmodule.exports = TrackPlayer;\n\n//# sourceURL=webpack://AirtableDriveUtils/./src/media-player/TrackPlayer.vue.js?");

/***/ }),

/***/ "./src/services/AirtableService.js":
/*!*****************************************!*\
  !*** ./src/services/AirtableService.js ***!
  \*****************************************/
/***/ ((module) => {

eval("document.write(\n    '<script src=\"https://cdn.jsdelivr.net/npm/airtable@0.11.4/lib/airtable.umd.min.js\"></script>'\n);\n\n\n// REQUIRES THE AIRTABLE SDK TO BE LOADED TO DOC PRIOR\n\nconst TABLES = {\n    TRACKS: 'tblreK8W3yna7ZTXc',\n    CATEGORIES: 'tbl8CbCI2Igv8iDYl',\n    SYNC: 'tblwc72Sfv7RRwF2Q',\n};\n\nconst BATCH_SIZE = 10;\n\nclass AirtableService {\n    constructor () {\n        this.isInitialized = false;\n    }\n\n\n    _init() {\n        this._base = new Airtable({apiKey: 'keyT4FekiPOQY8HZw'}).base('app412fK8ppzF15Y2');\n        this.isInitialized = true;\n        return this._base;\n    };\n\n    get base() {\n        return this._base ?? this._init();\n    };\n\n    async getLastSync() {\n        let res = await this.base(TABLES.SYNC).select({\n            // Selecting the first 3 records in Grid view:\n            maxRecords: 1,\n            view: \"Grid view\",\n        }).all();\n\n        return res[0]?.fields;\n    };\n\n    async saveSyncReport(created, updated, restored, deleted) {\n        return await this.base(TABLES.SYNC).create({\n            date: Date.now(),\n            created,\n            updated,\n            restored,\n            deleted,\n        });\n    }\n\n\n    async getAllTracks() {\n        return await this.base(TABLES.TRACKS).select({\n            view: \"All Tracks\",\n        }).all();\n    };\n\n    async getReleasedTracks() {\n        return await this.base(TABLES.TRACKS).select({\n            view: \"Released\",\n        }).all();\n    };\n\n    async saveNewFiles(files) {\n        return await this.batchOperation(files, async batch => {\n            return await this.base(TABLES.TRACKS).create(batch.map(t => this.driveFileToRecord(t)));\n        });\n    };\n\n\n    async saveUpdatedFiles(files) {\n        return await this.batchOperation(files, async batch => {\n            return await this.base(TABLES.TRACKS).update(batch.map(t => this.driveFileToRecord(t)));\n        });\n    };\n\n    async saveRestoredFiles(files) {\n        return await this.batchOperation(files, async batch => {\n            return await this.base(TABLES.TRACKS).update(batch.map(t => {\n\t\t\t\tconst record = this.driveFileToRecord(t);\n\t\t\t\trecord.fields.deleted_from_drive = false;\n\t\t\t\treturn record;\n\t\t\t}));\n        });\n    };\n\n\n    async saveDeletedFiles(records) {\n        return await this.batchOperation(records, async batch => {\n            return await this.base(TABLES.TRACKS).update(batch.map(record => ({\n                \"id\": record.id,\n                \"fields\": {\n                    deleted_from_drive: true,\n                }\n            })));\n        })\n    };\n\n    async getAllCategories() {\n        return await this.base(TABLES.CATEGORIES).select().all();\n    };\n\n\n\tasync updateTrackDuration(id, duration) {\n\t\tawait this.base(TABLES.TRACKS).update([{ id, fields: { duration } }]);\n\t}\n\n\n    async batchOperation(records, op) {\n        if (records.length === 0) return [];\n\n        records = [...records];\n\n        let batches = [];\n        while (records.length > 0) {\n            batches.push(records.splice(0, BATCH_SIZE));\n        }\n        let res = await Promise.all(batches.map(op));\n        return res.flat(1);\n    }\n    \n    driveFileToRecord(file) {\n        return {\n            id: file.recordId,\n            fields: {\n                file_name: file.name,\n                drive_id: file.id,\n                drive_folder: file.dateFolder,\n                release_date: file.dateFolder,\n                deleted_from_drive: file.deleted_from_drive ?? false,\n                duration: file.duration ?? undefined,\n            }\n        }\n    }\n};\n\nmodule.exports = new AirtableService();\n\n//# sourceURL=webpack://AirtableDriveUtils/./src/services/AirtableService.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	AirtableDriveUtils = __webpack_exports__;
/******/ 	
/******/ })()
;